* auot-save false
#+BEGIN_SRC emacs-lisp
   (setq auto-save-default nil)
#+END_SRC
* interface tweaks
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC

* try
#+BEGIN_SRC emacs-lisp
(use-package try
	      :ensure t)
#+END_SRC

* which
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC

* org-bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
:ensure t
:config
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

* buffer 
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
(defalias 'list-buffers 'ibuffer-other-window) ; make ibuffer default
#+END_SRC

* ace-window
#+BEGIN_SRC emacs-lisp
; add this to init.el
(windmove-default-keybindings)
(use-package ace-window
:ensure t
:init
(progn
(global-set-key [remap other-window] 'ace-window)
(custom-set-faces
'(aw-leading-char-face
((t (:inherit ace-jump-face-foreground :height 3.0)))))
))
#+END_SRC

* search
#+BEGIN_SRC emacs-lisp
(use-package counsel
:ensure t
  :bind
  (("M-y" . counsel-yank-pop)
   :map ivy-minibuffer-map
   ("M-y" . ivy-next-line)))

(use-package swiper
:ensure try
:config
(progn
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-load-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
))
#+END_SRC

* AVY
#+BEGIN_SRC 
(use-package avy
:ensure t
:bind ("M-s" . avy-goto-char))
#+END_SRC

* auto-complete
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
:ensure t
:init
(progn
(ac-config-default)
(global-auto-complete-mode t)
))
#+END_SRC
* themes
#+BEGIN_SRC emacs-lisp

(use-package zenburn-theme
  :ensure t
  :config (load-theme 'zenburn t))

#+END_SRC



* Reveal.js
#+BEGIN_SRC emacs-lisp
   (use-package ox-reveal
   :ensure ox-reveal)

   (setq org-reveal-root "http://cdn.jsdeliver.net/reveal.js/3.0.0/")
   (setq org-reveal-mathjax t)

   (use-package htmlize
   :ensure t)
#+END_SRC

* flycheck
#+BEGIN_SRC emacs-lisp
 (use-package flycheck-rtags
   :ensure t
   :init
      (global-flycheck-mode t)
   :config
      (defun my-flycheck-rtags-setup ()
      (flycheck-select-checker 'rtags)
      (setq-local flycheck-check-syntax-automatically nil)
      (setq-local flycheck-highlighting-mode nil))
      (add-hook 'c-mode-hook #'my-flycheck-rtags-setup)
      (add-hook 'c++-mode-hook #'my-flycheck-rtags-setup))
#+END_SRC
* Yasnippet
#+BEGIN_SRC emacs-lisp
   (use-package yasnippet
      :ensure t
      :init
         (yas-global-mode 1))
#+END_SRC
* Undo Tree
#+BEGIN_SRC emacs-lisp
   (use-package undo-tree
      :ensure t
      :init
         (global-undo-tree-mode))
#+END_SRC


* Misc packages
#+BEGIN_SRC emacs-lisp
   (global-hl-line-mode t)
   
   (use-package beacon
      :ensure t
      :config
      (beacon-mode 1))

   (use-package hungry-delete
   :ensure t
   :config 
   (global-hungry-delete-mode))

   (use-package aggressive-indent
   :ensure t
   :config 
   (global-aggressive-indent-mode 1))

   (use-package expand-region
   :ensure t
   :config
   (global-set-key (kbd "C-=") 'er/expand-region))

   (setq save-interprogram-paste-before-kill t)
#+END_SRC
* iedit
#+BEGIN_SRC emacs-lisp
   (use-package iedit
   :ensure t)
#+END_SRC




   
* emacs server
#+BEGIN_SRC emacs-lisp
   (ignore-errors
      (let ((warning-minimum-level :emergency))
         (require 'server)
	 (unless (server-running-p) (server-start))
	 (if (processp server-process)
	     (process-put server-process ':as (cond ((daemonp) 'daemon)
                                                    ((display-graphic-p) 'gui)
						    (t 'tty))))))
#+END_SRc



* Semantic
#+BEGIN_SRC emacs-lisp
   (use-package semantic
   :ensure t
   :config
      (global-semanticdb-minor-mode 1)
      (global-semantic-idle-scheduler-mode 1)
      (add-to-list 'semantic-default-submodes 'global-semantic-stickyfunc-mode)
      (global-semantic-idle-summary-mode 1)
      (semantic-mode 1))
#+END_SRC


* cmake-ide
  #+BEGIN_SRC emacs-lisp
  (require 'rtags)
  (require 'company-rtags)
  (global-company-mode)

  (setq rtags-completions-enabled t)
  (eval-after-load 'company
     '(add-to-list
        'company-backends 'company-rtags))
  (setq rtags-autostart-diagnostics t)
  (rtags-enable-standard-keybindings)
  (setq-mode-local c-mode semanticdb-find-default-throttle
     '(local project unloaded recursive))
     (setq-mode-local c++-mode semanticdb-find-default-throttle
     '(local project unloaded recursive))
  (semantic-remove-system-include "/usr/include" 'c++-mode)
  (semantic-remove-system-include "/usr/local/include" 'c++-mode)
  (add-hook 'semantic-init-hooks
            'semantic-reset-system-include)
  (cmake-ide-setup)
  #+END_SRC
* counsel-gtags
#+BEGIN_SRC emacs-lisp
   (use-package counsel-gtags
      :ensure t
      :config 
         (add-hook 'c-mode-hook 'counsel-gtags-mode)
(add-hook 'c++-mode-hook 'counsel-gtags-mode)
(setq-local imenu-create-index-function 'ggtags-build-imenu-index)
(with-eval-after-load 'counsel-gtags
  (define-key counsel-gtags-mode-map (kbd "M-t") 'counsel-gtags-find-definition)
  (define-key counsel-gtags-mode-map (kbd "M-r") 'counsel-gtags-find-reference)
  (define-key counsel-gtags-mode-map (kbd "M-s") 'counsel-gtags-find-symbol)
  (define-key counsel-gtags-mode-map (kbd "M-,") 'counsel-gtags-go-backward)))
#+END_SRC


* Company-mode
#+BEGIN_SRC emacs-lisp
   (use-package company
      :ensure t
      :config
         (require 'cc-mode)
         (add-hook 'after-init-hook 'global-company-mode)
	 (setq company-backends (delete 'company-semantic company-backends))
         (define-key c-mode-map  [(tab)] 'company-complete)
         (define-key c++-mode-map  [(tab)] 'company-complete))
#+END_SRC

* Company-c-headers
#+BEGIN_SRC emacs-lisp
   (use-package company-c-headers
   :ensure t
   :config 
      (add-to-list 'company-backends 'company-c-headers)
      (add-to-list 'company-c-headers-path-system "/usr/include/c++/4.8/"))
#+END_SRC

* complle
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f5>") (lambda ()
                               (interactive)
                               (setq-local compilation-read-command nil)
                               (call-interactively 'compile)))
#+END_SRC
* projectile
#+BEGIN_SRC emacs-lisp
   (projectile-mode)

#+END_SRC
* fonts
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 180) 
#+END_SRC
* evil-mode
#+BEGIN_SRC emacs-lisp
   (use-package evil
      :ensure t
      :config 
         (require 'evil)
	 (evil-mode 1))
#+END_SRC

* Git
#+BEGIN_SRC emacs-lisp
   (use-package magit
      :ensure t
      :config 
         (global-set-key (kbd "C-c m") 'magit-status))
#+END_SRC

* Hangul
#+BEGIN_SRC emacs-lisp
    (set-language-environment "Korean") 
    (set-fontset-font t 'hangul (font-spec :name "NanumGothicCoding")) 
    (prefer-coding-system 'utf-8) 
#+END_SRC
